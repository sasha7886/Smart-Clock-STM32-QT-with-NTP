
MINI_UART_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002378  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002484  08002484  00012484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080024b0  080024b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080024b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000124  2000000c  080024c4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000130  080024c4  00020130  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006491  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001394  00000000  00000000  000264c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000690  00000000  00000000  00027860  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000618  00000000  00000000  00027ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000030ec  00000000  00000000  00028508  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000022af  00000000  00000000  0002b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002d8a3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001950  00000000  00000000  0002d920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800246c 	.word	0x0800246c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800246c 	.word	0x0800246c

0800014c <HAL_UART_RxCpltCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	if(bufferRX[0]!='\r' && counter<10)
 8000154:	4b61      	ldr	r3, [pc, #388]	; (80002dc <HAL_UART_RxCpltCallback+0x190>)
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	2b0d      	cmp	r3, #13
 800015a:	d011      	beq.n	8000180 <HAL_UART_RxCpltCallback+0x34>
 800015c:	4b60      	ldr	r3, [pc, #384]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 800015e:	781b      	ldrb	r3, [r3, #0]
 8000160:	2b09      	cmp	r3, #9
 8000162:	d80d      	bhi.n	8000180 <HAL_UART_RxCpltCallback+0x34>
	{
		bufferTX[counter]=bufferRX[0];
 8000164:	4b5e      	ldr	r3, [pc, #376]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	461a      	mov	r2, r3
 800016a:	4b5c      	ldr	r3, [pc, #368]	; (80002dc <HAL_UART_RxCpltCallback+0x190>)
 800016c:	7819      	ldrb	r1, [r3, #0]
 800016e:	4b5d      	ldr	r3, [pc, #372]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 8000170:	5499      	strb	r1, [r3, r2]
		counter++;
 8000172:	4b5b      	ldr	r3, [pc, #364]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	3301      	adds	r3, #1
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4b59      	ldr	r3, [pc, #356]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 800017c:	701a      	strb	r2, [r3, #0]
 800017e:	e0a3      	b.n	80002c8 <HAL_UART_RxCpltCallback+0x17c>

	}
	else
	{
		if(counter>=10)
 8000180:	4b57      	ldr	r3, [pc, #348]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	2b09      	cmp	r3, #9
 8000186:	d92d      	bls.n	80001e4 <HAL_UART_RxCpltCallback+0x98>
		{
			bufferTX[counter]='\n';
 8000188:	4b55      	ldr	r3, [pc, #340]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	461a      	mov	r2, r3
 800018e:	4b55      	ldr	r3, [pc, #340]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 8000190:	210a      	movs	r1, #10
 8000192:	5499      	strb	r1, [r3, r2]
			counter++;
 8000194:	4b52      	ldr	r3, [pc, #328]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	3301      	adds	r3, #1
 800019a:	b2da      	uxtb	r2, r3
 800019c:	4b50      	ldr	r3, [pc, #320]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 800019e:	701a      	strb	r2, [r3, #0]
			bufferTX[counter]='\r';
 80001a0:	4b4f      	ldr	r3, [pc, #316]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	461a      	mov	r2, r3
 80001a6:	4b4f      	ldr	r3, [pc, #316]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 80001a8:	210d      	movs	r1, #13
 80001aa:	5499      	strb	r1, [r3, r2]
						counter++;
 80001ac:	4b4c      	ldr	r3, [pc, #304]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	3301      	adds	r3, #1
 80001b2:	b2da      	uxtb	r2, r3
 80001b4:	4b4a      	ldr	r3, [pc, #296]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 80001b6:	701a      	strb	r2, [r3, #0]
						bufferTX[counter]='\0';
 80001b8:	4b49      	ldr	r3, [pc, #292]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	461a      	mov	r2, r3
 80001be:	4b49      	ldr	r3, [pc, #292]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 80001c0:	2100      	movs	r1, #0
 80001c2:	5499      	strb	r1, [r3, r2]
									counter++;
 80001c4:	4b46      	ldr	r3, [pc, #280]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	3301      	adds	r3, #1
 80001ca:	b2da      	uxtb	r2, r3
 80001cc:	4b44      	ldr	r3, [pc, #272]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 80001ce:	701a      	strb	r2, [r3, #0]
									HAL_UART_Transmit(&huart1,bufferTX,13,0xFFFF);
 80001d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001d4:	220d      	movs	r2, #13
 80001d6:	4943      	ldr	r1, [pc, #268]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 80001d8:	4843      	ldr	r0, [pc, #268]	; (80002e8 <HAL_UART_RxCpltCallback+0x19c>)
 80001da:	f001 fc0a 	bl	80019f2 <HAL_UART_Transmit>
									counter=0;
 80001de:	4b40      	ldr	r3, [pc, #256]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	701a      	strb	r2, [r3, #0]
		}
		if(bufferRX[0]=='\r')
 80001e4:	4b3d      	ldr	r3, [pc, #244]	; (80002dc <HAL_UART_RxCpltCallback+0x190>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b0d      	cmp	r3, #13
 80001ea:	d16d      	bne.n	80002c8 <HAL_UART_RxCpltCallback+0x17c>
		{
			bufferTX[counter]='\n';
 80001ec:	4b3c      	ldr	r3, [pc, #240]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b3c      	ldr	r3, [pc, #240]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 80001f4:	210a      	movs	r1, #10
 80001f6:	5499      	strb	r1, [r3, r2]
						counter++;
 80001f8:	4b39      	ldr	r3, [pc, #228]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	3301      	adds	r3, #1
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	4b37      	ldr	r3, [pc, #220]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 8000202:	701a      	strb	r2, [r3, #0]
						bufferTX[counter]='\r';
 8000204:	4b36      	ldr	r3, [pc, #216]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	461a      	mov	r2, r3
 800020a:	4b36      	ldr	r3, [pc, #216]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 800020c:	210d      	movs	r1, #13
 800020e:	5499      	strb	r1, [r3, r2]
									counter++;
 8000210:	4b33      	ldr	r3, [pc, #204]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	3301      	adds	r3, #1
 8000216:	b2da      	uxtb	r2, r3
 8000218:	4b31      	ldr	r3, [pc, #196]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 800021a:	701a      	strb	r2, [r3, #0]
									bufferTX[counter]='\0';
 800021c:	4b30      	ldr	r3, [pc, #192]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	461a      	mov	r2, r3
 8000222:	4b30      	ldr	r3, [pc, #192]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 8000224:	2100      	movs	r1, #0
 8000226:	5499      	strb	r1, [r3, r2]
									counter++;
 8000228:	4b2d      	ldr	r3, [pc, #180]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b2b      	ldr	r3, [pc, #172]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 8000232:	701a      	strb	r2, [r3, #0]
									if(bufferTX[0]=='L' && bufferTX[1]=='E' && bufferTX[2]=='D' && bufferTX[3]=='_' && bufferTX[4]=='O' && bufferTX[5]=='N')
 8000234:	4b2b      	ldr	r3, [pc, #172]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b4c      	cmp	r3, #76	; 0x4c
 800023a:	d118      	bne.n	800026e <HAL_UART_RxCpltCallback+0x122>
 800023c:	4b29      	ldr	r3, [pc, #164]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 800023e:	785b      	ldrb	r3, [r3, #1]
 8000240:	2b45      	cmp	r3, #69	; 0x45
 8000242:	d114      	bne.n	800026e <HAL_UART_RxCpltCallback+0x122>
 8000244:	4b27      	ldr	r3, [pc, #156]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 8000246:	789b      	ldrb	r3, [r3, #2]
 8000248:	2b44      	cmp	r3, #68	; 0x44
 800024a:	d110      	bne.n	800026e <HAL_UART_RxCpltCallback+0x122>
 800024c:	4b25      	ldr	r3, [pc, #148]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 800024e:	78db      	ldrb	r3, [r3, #3]
 8000250:	2b5f      	cmp	r3, #95	; 0x5f
 8000252:	d10c      	bne.n	800026e <HAL_UART_RxCpltCallback+0x122>
 8000254:	4b23      	ldr	r3, [pc, #140]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 8000256:	791b      	ldrb	r3, [r3, #4]
 8000258:	2b4f      	cmp	r3, #79	; 0x4f
 800025a:	d108      	bne.n	800026e <HAL_UART_RxCpltCallback+0x122>
 800025c:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 800025e:	795b      	ldrb	r3, [r3, #5]
 8000260:	2b4e      	cmp	r3, #78	; 0x4e
 8000262:	d104      	bne.n	800026e <HAL_UART_RxCpltCallback+0x122>
									{
										HAL_GPIO_WritePin(GPIOA,LEDD_Pin,1);
 8000264:	2201      	movs	r2, #1
 8000266:	2108      	movs	r1, #8
 8000268:	4820      	ldr	r0, [pc, #128]	; (80002ec <HAL_UART_RxCpltCallback+0x1a0>)
 800026a:	f000 ff41 	bl	80010f0 <HAL_GPIO_WritePin>
									}
									if(bufferTX[0]=='L' && bufferTX[1]=='E' && bufferTX[2]=='D' && bufferTX[3]=='_' && bufferTX[4]=='O' && bufferTX[5]=='F' && bufferTX[6]=='F')
 800026e:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b4c      	cmp	r3, #76	; 0x4c
 8000274:	d11c      	bne.n	80002b0 <HAL_UART_RxCpltCallback+0x164>
 8000276:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 8000278:	785b      	ldrb	r3, [r3, #1]
 800027a:	2b45      	cmp	r3, #69	; 0x45
 800027c:	d118      	bne.n	80002b0 <HAL_UART_RxCpltCallback+0x164>
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 8000280:	789b      	ldrb	r3, [r3, #2]
 8000282:	2b44      	cmp	r3, #68	; 0x44
 8000284:	d114      	bne.n	80002b0 <HAL_UART_RxCpltCallback+0x164>
 8000286:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 8000288:	78db      	ldrb	r3, [r3, #3]
 800028a:	2b5f      	cmp	r3, #95	; 0x5f
 800028c:	d110      	bne.n	80002b0 <HAL_UART_RxCpltCallback+0x164>
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	2b4f      	cmp	r3, #79	; 0x4f
 8000294:	d10c      	bne.n	80002b0 <HAL_UART_RxCpltCallback+0x164>
 8000296:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 8000298:	795b      	ldrb	r3, [r3, #5]
 800029a:	2b46      	cmp	r3, #70	; 0x46
 800029c:	d108      	bne.n	80002b0 <HAL_UART_RxCpltCallback+0x164>
 800029e:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 80002a0:	799b      	ldrb	r3, [r3, #6]
 80002a2:	2b46      	cmp	r3, #70	; 0x46
 80002a4:	d104      	bne.n	80002b0 <HAL_UART_RxCpltCallback+0x164>
																		{
																			HAL_GPIO_WritePin(GPIOA,LEDD_Pin,0);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2108      	movs	r1, #8
 80002aa:	4810      	ldr	r0, [pc, #64]	; (80002ec <HAL_UART_RxCpltCallback+0x1a0>)
 80002ac:	f000 ff20 	bl	80010f0 <HAL_GPIO_WritePin>
																		}
			HAL_UART_Transmit(&huart1,bufferTX,counter,0xFFFF);
 80002b0:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002ba:	490a      	ldr	r1, [pc, #40]	; (80002e4 <HAL_UART_RxCpltCallback+0x198>)
 80002bc:	480a      	ldr	r0, [pc, #40]	; (80002e8 <HAL_UART_RxCpltCallback+0x19c>)
 80002be:	f001 fb98 	bl	80019f2 <HAL_UART_Transmit>
			counter=0;
 80002c2:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <HAL_UART_RxCpltCallback+0x194>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	701a      	strb	r2, [r3, #0]

		}
	}
	HAL_UART_Receive_IT(&huart1,bufferRX,1);
 80002c8:	2201      	movs	r2, #1
 80002ca:	4904      	ldr	r1, [pc, #16]	; (80002dc <HAL_UART_RxCpltCallback+0x190>)
 80002cc:	4806      	ldr	r0, [pc, #24]	; (80002e8 <HAL_UART_RxCpltCallback+0x19c>)
 80002ce:	f001 fc21 	bl	8001b14 <HAL_UART_Receive_IT>
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	2000010c 	.word	0x2000010c
 80002e0:	20000028 	.word	0x20000028
 80002e4:	2000011c 	.word	0x2000011c
 80002e8:	200000c8 	.word	0x200000c8
 80002ec:	40010800 	.word	0x40010800

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f000 fa12 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f810 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f000 f8a4 	bl	8000448 <MX_GPIO_Init>
  MX_DMA_Init();
 8000300:	f000 f87c 	bl	80003fc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000304:	f000 f850 	bl	80003a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_UART_Receive_IT(&huart1,bufferRX,1);
 8000308:	2201      	movs	r2, #1
 800030a:	4902      	ldr	r1, [pc, #8]	; (8000314 <main+0x24>)
 800030c:	4802      	ldr	r0, [pc, #8]	; (8000318 <main+0x28>)
 800030e:	f001 fc01 	bl	8001b14 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000312:	e7fe      	b.n	8000312 <main+0x22>
 8000314:	2000010c 	.word	0x2000010c
 8000318:	200000c8 	.word	0x200000c8

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b090      	sub	sp, #64	; 0x40
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0318 	add.w	r3, r7, #24
 8000326:	2228      	movs	r2, #40	; 0x28
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f002 f896 	bl	800245c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800033e:	2301      	movs	r3, #1
 8000340:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000346:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034c:	2301      	movs	r3, #1
 800034e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000350:	2302      	movs	r3, #2
 8000352:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800035a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800035e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000360:	f107 0318 	add.w	r3, r7, #24
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fedb 	bl	8001120 <HAL_RCC_OscConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000370:	f000 f8a8 	bl	80004c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	230f      	movs	r3, #15
 8000376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000378:	2302      	movs	r3, #2
 800037a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2102      	movs	r1, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f001 f946 	bl	8001620 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800039a:	f000 f893 	bl	80004c4 <Error_Handler>
  }
}
 800039e:	bf00      	nop
 80003a0:	3740      	adds	r7, #64	; 0x40
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <MX_USART1_UART_Init+0x50>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003e0:	f001 faba 	bl	8001958 <HAL_UART_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ea:	f000 f86b 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	200000c8 	.word	0x200000c8
 80003f8:	40013800 	.word	0x40013800

080003fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000402:	4a10      	ldr	r2, [pc, #64]	; (8000444 <MX_DMA_Init+0x48>)
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_DMA_Init+0x48>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <MX_DMA_Init+0x48>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800041a:	2200      	movs	r2, #0
 800041c:	2100      	movs	r1, #0
 800041e:	200e      	movs	r0, #14
 8000420:	f000 fab3 	bl	800098a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000424:	200e      	movs	r0, #14
 8000426:	f000 facc 	bl	80009c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	2100      	movs	r1, #0
 800042e:	200f      	movs	r0, #15
 8000430:	f000 faab 	bl	800098a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000434:	200f      	movs	r0, #15
 8000436:	f000 fac4 	bl	80009c2 <HAL_NVIC_EnableIRQ>

}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0308 	add.w	r3, r7, #8
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045c:	4a17      	ldr	r2, [pc, #92]	; (80004bc <MX_GPIO_Init+0x74>)
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <MX_GPIO_Init+0x74>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <MX_GPIO_Init+0x74>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4a11      	ldr	r2, [pc, #68]	; (80004bc <MX_GPIO_Init+0x74>)
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_GPIO_Init+0x74>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_GPIO_Init+0x74>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2108      	movs	r1, #8
 8000490:	480b      	ldr	r0, [pc, #44]	; (80004c0 <MX_GPIO_Init+0x78>)
 8000492:	f000 fe2d 	bl	80010f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDD_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin;
 8000496:	2308      	movs	r3, #8
 8000498:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	2301      	movs	r3, #1
 800049c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	2302      	movs	r3, #2
 80004a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LEDD_GPIO_Port, &GPIO_InitStruct);
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	4619      	mov	r1, r3
 80004ac:	4804      	ldr	r0, [pc, #16]	; (80004c0 <MX_GPIO_Init+0x78>)
 80004ae:	f000 fcc5 	bl	8000e3c <HAL_GPIO_Init>

}
 80004b2:	bf00      	nop
 80004b4:	3718      	adds	r7, #24
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010800 	.word	0x40010800

080004c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ca:	e7fe      	b.n	80004ca <Error_Handler+0x6>

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d2:	4a15      	ldr	r2, [pc, #84]	; (8000528 <HAL_MspInit+0x5c>)
 80004d4:	4b14      	ldr	r3, [pc, #80]	; (8000528 <HAL_MspInit+0x5c>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_MspInit+0x5c>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4a0f      	ldr	r2, [pc, #60]	; (8000528 <HAL_MspInit+0x5c>)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_MspInit+0x5c>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x5c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_MspInit+0x60>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_MspInit+0x60>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000
 800052c:	40010000 	.word	0x40010000

08000530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a47      	ldr	r2, [pc, #284]	; (8000668 <HAL_UART_MspInit+0x138>)
 800054c:	4293      	cmp	r3, r2
 800054e:	f040 8086 	bne.w	800065e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000552:	4a46      	ldr	r2, [pc, #280]	; (800066c <HAL_UART_MspInit+0x13c>)
 8000554:	4b45      	ldr	r3, [pc, #276]	; (800066c <HAL_UART_MspInit+0x13c>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055c:	6193      	str	r3, [r2, #24]
 800055e:	4b43      	ldr	r3, [pc, #268]	; (800066c <HAL_UART_MspInit+0x13c>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4a40      	ldr	r2, [pc, #256]	; (800066c <HAL_UART_MspInit+0x13c>)
 800056c:	4b3f      	ldr	r3, [pc, #252]	; (800066c <HAL_UART_MspInit+0x13c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b3d      	ldr	r3, [pc, #244]	; (800066c <HAL_UART_MspInit+0x13c>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000586:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000588:	2302      	movs	r3, #2
 800058a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058c:	2303      	movs	r3, #3
 800058e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4619      	mov	r1, r3
 8000596:	4836      	ldr	r0, [pc, #216]	; (8000670 <HAL_UART_MspInit+0x140>)
 8000598:	f000 fc50 	bl	8000e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800059c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	482f      	ldr	r0, [pc, #188]	; (8000670 <HAL_UART_MspInit+0x140>)
 80005b2:	f000 fc43 	bl	8000e3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <HAL_UART_MspInit+0x144>)
 80005b8:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <HAL_UART_MspInit+0x148>)
 80005ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <HAL_UART_MspInit+0x144>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <HAL_UART_MspInit+0x144>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <HAL_UART_MspInit+0x144>)
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <HAL_UART_MspInit+0x144>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <HAL_UART_MspInit+0x144>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <HAL_UART_MspInit+0x144>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <HAL_UART_MspInit+0x144>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80005e6:	4823      	ldr	r0, [pc, #140]	; (8000674 <HAL_UART_MspInit+0x144>)
 80005e8:	f000 fa06 	bl	80009f8 <HAL_DMA_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80005f2:	f7ff ff67 	bl	80004c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a1e      	ldr	r2, [pc, #120]	; (8000674 <HAL_UART_MspInit+0x144>)
 80005fa:	639a      	str	r2, [r3, #56]	; 0x38
 80005fc:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <HAL_UART_MspInit+0x144>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000602:	4b1e      	ldr	r3, [pc, #120]	; (800067c <HAL_UART_MspInit+0x14c>)
 8000604:	4a1e      	ldr	r2, [pc, #120]	; (8000680 <HAL_UART_MspInit+0x150>)
 8000606:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <HAL_UART_MspInit+0x14c>)
 800060a:	2210      	movs	r2, #16
 800060c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800060e:	4b1b      	ldr	r3, [pc, #108]	; (800067c <HAL_UART_MspInit+0x14c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_UART_MspInit+0x14c>)
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <HAL_UART_MspInit+0x14c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <HAL_UART_MspInit+0x14c>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_UART_MspInit+0x14c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <HAL_UART_MspInit+0x14c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000632:	4812      	ldr	r0, [pc, #72]	; (800067c <HAL_UART_MspInit+0x14c>)
 8000634:	f000 f9e0 	bl	80009f8 <HAL_DMA_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800063e:	f7ff ff41 	bl	80004c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <HAL_UART_MspInit+0x14c>)
 8000646:	635a      	str	r2, [r3, #52]	; 0x34
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <HAL_UART_MspInit+0x14c>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	2025      	movs	r0, #37	; 0x25
 8000654:	f000 f999 	bl	800098a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000658:	2025      	movs	r0, #37	; 0x25
 800065a:	f000 f9b2 	bl	80009c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800065e:	bf00      	nop
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40013800 	.word	0x40013800
 800066c:	40021000 	.word	0x40021000
 8000670:	40010800 	.word	0x40010800
 8000674:	20000084 	.word	0x20000084
 8000678:	40020058 	.word	0x40020058
 800067c:	20000040 	.word	0x20000040
 8000680:	40020044 	.word	0x40020044

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <NMI_Handler+0x4>

0800068a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <MemManage_Handler+0x4>

08000696 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr

080006ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr

080006ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ca:	f000 f86d 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80006d8:	4802      	ldr	r0, [pc, #8]	; (80006e4 <DMA1_Channel4_IRQHandler+0x10>)
 80006da:	f000 fa9d 	bl	8000c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000040 	.word	0x20000040

080006e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <DMA1_Channel5_IRQHandler+0x10>)
 80006ee:	f000 fa93 	bl	8000c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000084 	.word	0x20000084

080006fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000700:	4802      	ldr	r0, [pc, #8]	; (800070c <USART1_IRQHandler+0x10>)
 8000702:	f001 fa37 	bl	8001b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000c8 	.word	0x200000c8

08000710 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f921 	bl	8000974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	200f      	movs	r0, #15
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff fec8 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f939 	bl	80009de <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 f901 	bl	800098a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_IncTick+0x20>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a03      	ldr	r2, [pc, #12]	; (80007c8 <HAL_IncTick+0x20>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	20000008 	.word	0x20000008
 80007c8:	2000012c 	.word	0x2000012c

080007cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b02      	ldr	r3, [pc, #8]	; (80007dc <HAL_GetTick+0x10>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	2000012c 	.word	0x2000012c

080007e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007fc:	4013      	ands	r3, r2
 80007fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800080c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000812:	4a04      	ldr	r2, [pc, #16]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	60d3      	str	r3, [r2, #12]
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <__NVIC_GetPriorityGrouping+0x18>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	f003 0307 	and.w	r3, r3, #7
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	2b00      	cmp	r3, #0
 8000854:	db0b      	blt.n	800086e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000856:	4908      	ldr	r1, [pc, #32]	; (8000878 <__NVIC_EnableIRQ+0x34>)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	095b      	lsrs	r3, r3, #5
 800085e:	79fa      	ldrb	r2, [r7, #7]
 8000860:	f002 021f 	and.w	r2, r2, #31
 8000864:	2001      	movs	r0, #1
 8000866:	fa00 f202 	lsl.w	r2, r0, r2
 800086a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	e000e100 	.word	0xe000e100

0800087c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	db0a      	blt.n	80008a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000890:	490d      	ldr	r1, [pc, #52]	; (80008c8 <__NVIC_SetPriority+0x4c>)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	0112      	lsls	r2, r2, #4
 800089c:	b2d2      	uxtb	r2, r2
 800089e:	440b      	add	r3, r1
 80008a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a4:	e00a      	b.n	80008bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a6:	4909      	ldr	r1, [pc, #36]	; (80008cc <__NVIC_SetPriority+0x50>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	3b04      	subs	r3, #4
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	0112      	lsls	r2, r2, #4
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	440b      	add	r3, r1
 80008ba:	761a      	strb	r2, [r3, #24]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000e100 	.word	0xe000e100
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b089      	sub	sp, #36	; 0x24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	f1c3 0307 	rsb	r3, r3, #7
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	bf28      	it	cs
 80008ee:	2304      	movcs	r3, #4
 80008f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3304      	adds	r3, #4
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	d902      	bls.n	8000900 <NVIC_EncodePriority+0x30>
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3b03      	subs	r3, #3
 80008fe:	e000      	b.n	8000902 <NVIC_EncodePriority+0x32>
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000904:	2201      	movs	r2, #1
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	1e5a      	subs	r2, r3, #1
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	401a      	ands	r2, r3
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000916:	2101      	movs	r1, #1
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	1e59      	subs	r1, r3, #1
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	4313      	orrs	r3, r2
         );
}
 8000926:	4618      	mov	r0, r3
 8000928:	3724      	adds	r7, #36	; 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000940:	d301      	bcc.n	8000946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000942:	2301      	movs	r3, #1
 8000944:	e00f      	b.n	8000966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <SysTick_Config+0x40>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094e:	210f      	movs	r1, #15
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f7ff ff92 	bl	800087c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <SysTick_Config+0x40>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <SysTick_Config+0x40>)
 8000960:	2207      	movs	r2, #7
 8000962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	e000e010 	.word	0xe000e010

08000974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff2f 	bl	80007e0 <__NVIC_SetPriorityGrouping>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800099c:	f7ff ff44 	bl	8000828 <__NVIC_GetPriorityGrouping>
 80009a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	6978      	ldr	r0, [r7, #20]
 80009a8:	f7ff ff92 	bl	80008d0 <NVIC_EncodePriority>
 80009ac:	4602      	mov	r2, r0
 80009ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff61 	bl	800087c <__NVIC_SetPriority>
}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff37 	bl	8000844 <__NVIC_EnableIRQ>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffa2 	bl	8000930 <SysTick_Config>
 80009ec:	4603      	mov	r3, r0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e043      	b.n	8000a96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <HAL_DMA_Init+0xa8>)
 8000a16:	4413      	add	r3, r2
 8000a18:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <HAL_DMA_Init+0xac>)
 8000a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1e:	091b      	lsrs	r3, r3, #4
 8000a20:	009a      	lsls	r2, r3, #2
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <HAL_DMA_Init+0xb0>)
 8000a2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2202      	movs	r2, #2
 8000a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	bffdfff8 	.word	0xbffdfff8
 8000aa4:	cccccccd 	.word	0xcccccccd
 8000aa8:	40020000 	.word	0x40020000

08000aac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d008      	beq.n	8000ad4 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e020      	b.n	8000b16 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	6812      	ldr	r2, [r2, #0]
 8000ade:	f022 020e 	bic.w	r2, r2, #14
 8000ae2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	6812      	ldr	r2, [r2, #0]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	f022 0201 	bic.w	r2, r2, #1
 8000af2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000afc:	2101      	movs	r1, #1
 8000afe:	fa01 f202 	lsl.w	r2, r1, r2
 8000b02:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2201      	movs	r2, #1
 8000b08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d005      	beq.n	8000b42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2204      	movs	r2, #4
 8000b3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e057      	b.n	8000bf2 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	6812      	ldr	r2, [r2, #0]
 8000b4a:	6812      	ldr	r2, [r2, #0]
 8000b4c:	f022 020e 	bic.w	r2, r2, #14
 8000b50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	6812      	ldr	r2, [r2, #0]
 8000b5c:	f022 0201 	bic.w	r2, r2, #1
 8000b60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b62:	4a26      	ldr	r2, [pc, #152]	; (8000bfc <HAL_DMA_Abort_IT+0xdc>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <HAL_DMA_Abort_IT+0xe0>)
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d02e      	beq.n	8000bce <HAL_DMA_Abort_IT+0xae>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <HAL_DMA_Abort_IT+0xe4>)
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d026      	beq.n	8000bca <HAL_DMA_Abort_IT+0xaa>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <HAL_DMA_Abort_IT+0xe8>)
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d01d      	beq.n	8000bc4 <HAL_DMA_Abort_IT+0xa4>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <HAL_DMA_Abort_IT+0xec>)
 8000b90:	4299      	cmp	r1, r3
 8000b92:	d014      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x9e>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <HAL_DMA_Abort_IT+0xf0>)
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d00b      	beq.n	8000bb8 <HAL_DMA_Abort_IT+0x98>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <HAL_DMA_Abort_IT+0xf4>)
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	d102      	bne.n	8000bb2 <HAL_DMA_Abort_IT+0x92>
 8000bac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bb0:	e00e      	b.n	8000bd0 <HAL_DMA_Abort_IT+0xb0>
 8000bb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bb6:	e00b      	b.n	8000bd0 <HAL_DMA_Abort_IT+0xb0>
 8000bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbc:	e008      	b.n	8000bd0 <HAL_DMA_Abort_IT+0xb0>
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	e005      	b.n	8000bd0 <HAL_DMA_Abort_IT+0xb0>
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	e002      	b.n	8000bd0 <HAL_DMA_Abort_IT+0xb0>
 8000bca:	2310      	movs	r3, #16
 8000bcc:	e000      	b.n	8000bd0 <HAL_DMA_Abort_IT+0xb0>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	4798      	blx	r3
    } 
  }
  return status;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40020008 	.word	0x40020008
 8000c04:	4002001c 	.word	0x4002001c
 8000c08:	40020030 	.word	0x40020030
 8000c0c:	40020044 	.word	0x40020044
 8000c10:	40020058 	.word	0x40020058
 8000c14:	4002006c 	.word	0x4002006c

08000c18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	2204      	movs	r2, #4
 8000c36:	409a      	lsls	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d055      	beq.n	8000cec <HAL_DMA_IRQHandler+0xd4>
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d050      	beq.n	8000cec <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0320 	and.w	r3, r3, #32
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d107      	bne.n	8000c68 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	f022 0204 	bic.w	r2, r2, #4
 8000c66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c68:	4a6d      	ldr	r2, [pc, #436]	; (8000e20 <HAL_DMA_IRQHandler+0x208>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4b6c      	ldr	r3, [pc, #432]	; (8000e24 <HAL_DMA_IRQHandler+0x20c>)
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d02e      	beq.n	8000cd4 <HAL_DMA_IRQHandler+0xbc>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4b6a      	ldr	r3, [pc, #424]	; (8000e28 <HAL_DMA_IRQHandler+0x210>)
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	d026      	beq.n	8000cd0 <HAL_DMA_IRQHandler+0xb8>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4619      	mov	r1, r3
 8000c88:	4b68      	ldr	r3, [pc, #416]	; (8000e2c <HAL_DMA_IRQHandler+0x214>)
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d01d      	beq.n	8000cca <HAL_DMA_IRQHandler+0xb2>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4619      	mov	r1, r3
 8000c94:	4b66      	ldr	r3, [pc, #408]	; (8000e30 <HAL_DMA_IRQHandler+0x218>)
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d014      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0xac>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4b64      	ldr	r3, [pc, #400]	; (8000e34 <HAL_DMA_IRQHandler+0x21c>)
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d00b      	beq.n	8000cbe <HAL_DMA_IRQHandler+0xa6>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	4b62      	ldr	r3, [pc, #392]	; (8000e38 <HAL_DMA_IRQHandler+0x220>)
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	d102      	bne.n	8000cb8 <HAL_DMA_IRQHandler+0xa0>
 8000cb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cb6:	e00e      	b.n	8000cd6 <HAL_DMA_IRQHandler+0xbe>
 8000cb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000cbc:	e00b      	b.n	8000cd6 <HAL_DMA_IRQHandler+0xbe>
 8000cbe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000cc2:	e008      	b.n	8000cd6 <HAL_DMA_IRQHandler+0xbe>
 8000cc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cc8:	e005      	b.n	8000cd6 <HAL_DMA_IRQHandler+0xbe>
 8000cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cce:	e002      	b.n	8000cd6 <HAL_DMA_IRQHandler+0xbe>
 8000cd0:	2340      	movs	r3, #64	; 0x40
 8000cd2:	e000      	b.n	8000cd6 <HAL_DMA_IRQHandler+0xbe>
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f000 809a 	beq.w	8000e16 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000cea:	e094      	b.n	8000e16 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d05c      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x19e>
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d057      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0320 	and.w	r3, r3, #32
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d10b      	bne.n	8000d2c <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	6812      	ldr	r2, [r2, #0]
 8000d1c:	6812      	ldr	r2, [r2, #0]
 8000d1e:	f022 020a 	bic.w	r2, r2, #10
 8000d22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2201      	movs	r2, #1
 8000d28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d2c:	4a3c      	ldr	r2, [pc, #240]	; (8000e20 <HAL_DMA_IRQHandler+0x208>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4619      	mov	r1, r3
 8000d34:	4b3b      	ldr	r3, [pc, #236]	; (8000e24 <HAL_DMA_IRQHandler+0x20c>)
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d02e      	beq.n	8000d98 <HAL_DMA_IRQHandler+0x180>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4b39      	ldr	r3, [pc, #228]	; (8000e28 <HAL_DMA_IRQHandler+0x210>)
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d026      	beq.n	8000d94 <HAL_DMA_IRQHandler+0x17c>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <HAL_DMA_IRQHandler+0x214>)
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	d01d      	beq.n	8000d8e <HAL_DMA_IRQHandler+0x176>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4619      	mov	r1, r3
 8000d58:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <HAL_DMA_IRQHandler+0x218>)
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	d014      	beq.n	8000d88 <HAL_DMA_IRQHandler+0x170>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	4b33      	ldr	r3, [pc, #204]	; (8000e34 <HAL_DMA_IRQHandler+0x21c>)
 8000d66:	4299      	cmp	r1, r3
 8000d68:	d00b      	beq.n	8000d82 <HAL_DMA_IRQHandler+0x16a>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <HAL_DMA_IRQHandler+0x220>)
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d102      	bne.n	8000d7c <HAL_DMA_IRQHandler+0x164>
 8000d76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d7a:	e00e      	b.n	8000d9a <HAL_DMA_IRQHandler+0x182>
 8000d7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d80:	e00b      	b.n	8000d9a <HAL_DMA_IRQHandler+0x182>
 8000d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d86:	e008      	b.n	8000d9a <HAL_DMA_IRQHandler+0x182>
 8000d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8c:	e005      	b.n	8000d9a <HAL_DMA_IRQHandler+0x182>
 8000d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d92:	e002      	b.n	8000d9a <HAL_DMA_IRQHandler+0x182>
 8000d94:	2320      	movs	r3, #32
 8000d96:	e000      	b.n	8000d9a <HAL_DMA_IRQHandler+0x182>
 8000d98:	2302      	movs	r3, #2
 8000d9a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d034      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000db4:	e02f      	b.n	8000e16 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	2208      	movs	r2, #8
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d028      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x200>
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d023      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	f022 020e 	bic.w	r2, r2, #14
 8000dde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000de8:	2101      	movs	r1, #1
 8000dea:	fa01 f202 	lsl.w	r2, r1, r2
 8000dee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2201      	movs	r2, #1
 8000df4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d004      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	4798      	blx	r3
    }
  }
  return;
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
}
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020008 	.word	0x40020008
 8000e28:	4002001c 	.word	0x4002001c
 8000e2c:	40020030 	.word	0x40020030
 8000e30:	40020044 	.word	0x40020044
 8000e34:	40020058 	.word	0x40020058
 8000e38:	4002006c 	.word	0x4002006c

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b08b      	sub	sp, #44	; 0x2c
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4e:	e127      	b.n	80010a0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e50:	2201      	movs	r2, #1
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 8116 	bne.w	800109a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b12      	cmp	r3, #18
 8000e74:	d034      	beq.n	8000ee0 <HAL_GPIO_Init+0xa4>
 8000e76:	2b12      	cmp	r3, #18
 8000e78:	d80d      	bhi.n	8000e96 <HAL_GPIO_Init+0x5a>
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d02b      	beq.n	8000ed6 <HAL_GPIO_Init+0x9a>
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d804      	bhi.n	8000e8c <HAL_GPIO_Init+0x50>
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d031      	beq.n	8000eea <HAL_GPIO_Init+0xae>
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d01c      	beq.n	8000ec4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e8a:	e048      	b.n	8000f1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d043      	beq.n	8000f18 <HAL_GPIO_Init+0xdc>
 8000e90:	2b11      	cmp	r3, #17
 8000e92:	d01b      	beq.n	8000ecc <HAL_GPIO_Init+0x90>
          break;
 8000e94:	e043      	b.n	8000f1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e96:	4a89      	ldr	r2, [pc, #548]	; (80010bc <HAL_GPIO_Init+0x280>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d026      	beq.n	8000eea <HAL_GPIO_Init+0xae>
 8000e9c:	4a87      	ldr	r2, [pc, #540]	; (80010bc <HAL_GPIO_Init+0x280>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d806      	bhi.n	8000eb0 <HAL_GPIO_Init+0x74>
 8000ea2:	4a87      	ldr	r2, [pc, #540]	; (80010c0 <HAL_GPIO_Init+0x284>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d020      	beq.n	8000eea <HAL_GPIO_Init+0xae>
 8000ea8:	4a86      	ldr	r2, [pc, #536]	; (80010c4 <HAL_GPIO_Init+0x288>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d01d      	beq.n	8000eea <HAL_GPIO_Init+0xae>
          break;
 8000eae:	e036      	b.n	8000f1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000eb0:	4a85      	ldr	r2, [pc, #532]	; (80010c8 <HAL_GPIO_Init+0x28c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d019      	beq.n	8000eea <HAL_GPIO_Init+0xae>
 8000eb6:	4a85      	ldr	r2, [pc, #532]	; (80010cc <HAL_GPIO_Init+0x290>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d016      	beq.n	8000eea <HAL_GPIO_Init+0xae>
 8000ebc:	4a84      	ldr	r2, [pc, #528]	; (80010d0 <HAL_GPIO_Init+0x294>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0xae>
          break;
 8000ec2:	e02c      	b.n	8000f1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	623b      	str	r3, [r7, #32]
          break;
 8000eca:	e028      	b.n	8000f1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	623b      	str	r3, [r7, #32]
          break;
 8000ed4:	e023      	b.n	8000f1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	3308      	adds	r3, #8
 8000edc:	623b      	str	r3, [r7, #32]
          break;
 8000ede:	e01e      	b.n	8000f1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	330c      	adds	r3, #12
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e019      	b.n	8000f1e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	623b      	str	r3, [r7, #32]
          break;
 8000ef6:	e012      	b.n	8000f1e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d105      	bne.n	8000f0c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f00:	2308      	movs	r3, #8
 8000f02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	611a      	str	r2, [r3, #16]
          break;
 8000f0a:	e008      	b.n	8000f1e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	615a      	str	r2, [r3, #20]
          break;
 8000f16:	e002      	b.n	8000f1e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
          break;
 8000f1c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2bff      	cmp	r3, #255	; 0xff
 8000f22:	d801      	bhi.n	8000f28 <HAL_GPIO_Init+0xec>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	e001      	b.n	8000f2c <HAL_GPIO_Init+0xf0>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	2bff      	cmp	r3, #255	; 0xff
 8000f32:	d802      	bhi.n	8000f3a <HAL_GPIO_Init+0xfe>
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_Init+0x104>
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	3b08      	subs	r3, #8
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	210f      	movs	r1, #15
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	401a      	ands	r2, r3
 8000f52:	6a39      	ldr	r1, [r7, #32]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 8096 	beq.w	800109a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6e:	4a59      	ldr	r2, [pc, #356]	; (80010d4 <HAL_GPIO_Init+0x298>)
 8000f70:	4b58      	ldr	r3, [pc, #352]	; (80010d4 <HAL_GPIO_Init+0x298>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b56      	ldr	r3, [pc, #344]	; (80010d4 <HAL_GPIO_Init+0x298>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f86:	4a54      	ldr	r2, [pc, #336]	; (80010d8 <HAL_GPIO_Init+0x29c>)
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f92:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4b      	ldr	r2, [pc, #300]	; (80010dc <HAL_GPIO_Init+0x2a0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0x19e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4a      	ldr	r2, [pc, #296]	; (80010e0 <HAL_GPIO_Init+0x2a4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d00d      	beq.n	8000fd6 <HAL_GPIO_Init+0x19a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a49      	ldr	r2, [pc, #292]	; (80010e4 <HAL_GPIO_Init+0x2a8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_GPIO_Init+0x196>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a48      	ldr	r2, [pc, #288]	; (80010e8 <HAL_GPIO_Init+0x2ac>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_GPIO_Init+0x192>
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x1a0>
 8000fce:	2304      	movs	r3, #4
 8000fd0:	e004      	b.n	8000fdc <HAL_GPIO_Init+0x1a0>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_Init+0x1a0>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x1a0>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fde:	f002 0203 	and.w	r2, r2, #3
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fec:	493a      	ldr	r1, [pc, #232]	; (80010d8 <HAL_GPIO_Init+0x29c>)
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d006      	beq.n	8001014 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001006:	4939      	ldr	r1, [pc, #228]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8001008:	4b38      	ldr	r3, [pc, #224]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
 8001012:	e006      	b.n	8001022 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001014:	4935      	ldr	r1, [pc, #212]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8001016:	4b35      	ldr	r3, [pc, #212]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	43db      	mvns	r3, r3
 800101e:	4013      	ands	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d006      	beq.n	800103c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800102e:	492f      	ldr	r1, [pc, #188]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8001030:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	604b      	str	r3, [r1, #4]
 800103a:	e006      	b.n	800104a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800103c:	492b      	ldr	r1, [pc, #172]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 800103e:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	43db      	mvns	r3, r3
 8001046:	4013      	ands	r3, r2
 8001048:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d006      	beq.n	8001064 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001056:	4925      	ldr	r1, [pc, #148]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	608b      	str	r3, [r1, #8]
 8001062:	e006      	b.n	8001072 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001064:	4921      	ldr	r1, [pc, #132]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	43db      	mvns	r3, r3
 800106e:	4013      	ands	r3, r2
 8001070:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d006      	beq.n	800108c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800107e:	491b      	ldr	r1, [pc, #108]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	60cb      	str	r3, [r1, #12]
 800108a:	e006      	b.n	800109a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800108c:	4917      	ldr	r1, [pc, #92]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_GPIO_Init+0x2b0>)
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	43db      	mvns	r3, r3
 8001096:	4013      	ands	r3, r2
 8001098:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	3301      	adds	r3, #1
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	fa22 f303 	lsr.w	r3, r2, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f47f aed0 	bne.w	8000e50 <HAL_GPIO_Init+0x14>
  }
}
 80010b0:	bf00      	nop
 80010b2:	372c      	adds	r7, #44	; 0x2c
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	10210000 	.word	0x10210000
 80010c0:	10110000 	.word	0x10110000
 80010c4:	10120000 	.word	0x10120000
 80010c8:	10310000 	.word	0x10310000
 80010cc:	10320000 	.word	0x10320000
 80010d0:	10220000 	.word	0x10220000
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000
 80010dc:	40010800 	.word	0x40010800
 80010e0:	40010c00 	.word	0x40010c00
 80010e4:	40011000 	.word	0x40011000
 80010e8:	40011400 	.word	0x40011400
 80010ec:	40010400 	.word	0x40010400

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800110c:	e003      	b.n	8001116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	041a      	lsls	r2, r3, #16
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	611a      	str	r2, [r3, #16]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e26c      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 8087 	beq.w	800124e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001140:	4b92      	ldr	r3, [pc, #584]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 030c 	and.w	r3, r3, #12
 8001148:	2b04      	cmp	r3, #4
 800114a:	d00c      	beq.n	8001166 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800114c:	4b8f      	ldr	r3, [pc, #572]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b08      	cmp	r3, #8
 8001156:	d112      	bne.n	800117e <HAL_RCC_OscConfig+0x5e>
 8001158:	4b8c      	ldr	r3, [pc, #560]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001164:	d10b      	bne.n	800117e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001166:	4b89      	ldr	r3, [pc, #548]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d06c      	beq.n	800124c <HAL_RCC_OscConfig+0x12c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d168      	bne.n	800124c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e246      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001186:	d106      	bne.n	8001196 <HAL_RCC_OscConfig+0x76>
 8001188:	4a80      	ldr	r2, [pc, #512]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 800118a:	4b80      	ldr	r3, [pc, #512]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	e02e      	b.n	80011f4 <HAL_RCC_OscConfig+0xd4>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x98>
 800119e:	4a7b      	ldr	r2, [pc, #492]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80011a0:	4b7a      	ldr	r3, [pc, #488]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	4a78      	ldr	r2, [pc, #480]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80011ac:	4b77      	ldr	r3, [pc, #476]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e01d      	b.n	80011f4 <HAL_RCC_OscConfig+0xd4>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c0:	d10c      	bne.n	80011dc <HAL_RCC_OscConfig+0xbc>
 80011c2:	4a72      	ldr	r2, [pc, #456]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80011c4:	4b71      	ldr	r3, [pc, #452]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	4a6f      	ldr	r2, [pc, #444]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80011d0:	4b6e      	ldr	r3, [pc, #440]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e00b      	b.n	80011f4 <HAL_RCC_OscConfig+0xd4>
 80011dc:	4a6b      	ldr	r2, [pc, #428]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80011de:	4b6b      	ldr	r3, [pc, #428]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4a68      	ldr	r2, [pc, #416]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80011ea:	4b68      	ldr	r3, [pc, #416]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d013      	beq.n	8001224 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fae6 	bl	80007cc <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001204:	f7ff fae2 	bl	80007cc <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b64      	cmp	r3, #100	; 0x64
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e1fa      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	4b5d      	ldr	r3, [pc, #372]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0xe4>
 8001222:	e014      	b.n	800124e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fad2 	bl	80007cc <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff face 	bl	80007cc <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	; 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e1e6      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123e:	4b53      	ldr	r3, [pc, #332]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x10c>
 800124a:	e000      	b.n	800124e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d063      	beq.n	8001322 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800125a:	4b4c      	ldr	r3, [pc, #304]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00b      	beq.n	800127e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001266:	4b49      	ldr	r3, [pc, #292]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b08      	cmp	r3, #8
 8001270:	d11c      	bne.n	80012ac <HAL_RCC_OscConfig+0x18c>
 8001272:	4b46      	ldr	r3, [pc, #280]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d116      	bne.n	80012ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127e:	4b43      	ldr	r3, [pc, #268]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <HAL_RCC_OscConfig+0x176>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d001      	beq.n	8001296 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e1ba      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	493d      	ldr	r1, [pc, #244]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 8001298:	4b3c      	ldr	r3, [pc, #240]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	e03a      	b.n	8001322 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d020      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b4:	4b36      	ldr	r3, [pc, #216]	; (8001390 <HAL_RCC_OscConfig+0x270>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ba:	f7ff fa87 	bl	80007cc <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c2:	f7ff fa83 	bl	80007cc <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e19b      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e0:	492a      	ldr	r1, [pc, #168]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]
 80012f4:	e015      	b.n	8001322 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <HAL_RCC_OscConfig+0x270>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fa66 	bl	80007cc <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001304:	f7ff fa62 	bl	80007cc <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e17a      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d03a      	beq.n	80013a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d019      	beq.n	800136a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_RCC_OscConfig+0x274>)
 8001338:	2201      	movs	r2, #1
 800133a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133c:	f7ff fa46 	bl	80007cc <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001344:	f7ff fa42 	bl	80007cc <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e15a      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_RCC_OscConfig+0x26c>)
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f000 fada 	bl	800191c <RCC_Delay>
 8001368:	e01c      	b.n	80013a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_RCC_OscConfig+0x274>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001370:	f7ff fa2c 	bl	80007cc <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001376:	e00f      	b.n	8001398 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001378:	f7ff fa28 	bl	80007cc <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d908      	bls.n	8001398 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e140      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	42420000 	.word	0x42420000
 8001394:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001398:	4b9e      	ldr	r3, [pc, #632]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1e9      	bne.n	8001378 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80a6 	beq.w	80014fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b6:	4b97      	ldr	r3, [pc, #604]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10d      	bne.n	80013de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4a94      	ldr	r2, [pc, #592]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	4b93      	ldr	r3, [pc, #588]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	61d3      	str	r3, [r2, #28]
 80013ce:	4b91      	ldr	r3, [pc, #580]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013da:	2301      	movs	r3, #1
 80013dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013de:	4b8e      	ldr	r3, [pc, #568]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d118      	bne.n	800141c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ea:	4a8b      	ldr	r2, [pc, #556]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80013ec:	4b8a      	ldr	r3, [pc, #552]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f6:	f7ff f9e9 	bl	80007cc <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fe:	f7ff f9e5 	bl	80007cc <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b64      	cmp	r3, #100	; 0x64
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e0fd      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001410:	4b81      	ldr	r3, [pc, #516]	; (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d106      	bne.n	8001432 <HAL_RCC_OscConfig+0x312>
 8001424:	4a7b      	ldr	r2, [pc, #492]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 8001426:	4b7b      	ldr	r3, [pc, #492]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6213      	str	r3, [r2, #32]
 8001430:	e02d      	b.n	800148e <HAL_RCC_OscConfig+0x36e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0x334>
 800143a:	4a76      	ldr	r2, [pc, #472]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 800143c:	4b75      	ldr	r3, [pc, #468]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	6213      	str	r3, [r2, #32]
 8001446:	4a73      	ldr	r2, [pc, #460]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 8001448:	4b72      	ldr	r3, [pc, #456]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	f023 0304 	bic.w	r3, r3, #4
 8001450:	6213      	str	r3, [r2, #32]
 8001452:	e01c      	b.n	800148e <HAL_RCC_OscConfig+0x36e>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b05      	cmp	r3, #5
 800145a:	d10c      	bne.n	8001476 <HAL_RCC_OscConfig+0x356>
 800145c:	4a6d      	ldr	r2, [pc, #436]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 800145e:	4b6d      	ldr	r3, [pc, #436]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	6213      	str	r3, [r2, #32]
 8001468:	4a6a      	ldr	r2, [pc, #424]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6213      	str	r3, [r2, #32]
 8001474:	e00b      	b.n	800148e <HAL_RCC_OscConfig+0x36e>
 8001476:	4a67      	ldr	r2, [pc, #412]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 8001478:	4b66      	ldr	r3, [pc, #408]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	f023 0301 	bic.w	r3, r3, #1
 8001480:	6213      	str	r3, [r2, #32]
 8001482:	4a64      	ldr	r2, [pc, #400]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	4b63      	ldr	r3, [pc, #396]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d015      	beq.n	80014c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001496:	f7ff f999 	bl	80007cc <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149c:	e00a      	b.n	80014b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149e:	f7ff f995 	bl	80007cc <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e0ab      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b4:	4b57      	ldr	r3, [pc, #348]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0ee      	beq.n	800149e <HAL_RCC_OscConfig+0x37e>
 80014c0:	e014      	b.n	80014ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c2:	f7ff f983 	bl	80007cc <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c8:	e00a      	b.n	80014e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ca:	f7ff f97f 	bl	80007cc <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d8:	4293      	cmp	r3, r2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e095      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e0:	4b4c      	ldr	r3, [pc, #304]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1ee      	bne.n	80014ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d105      	bne.n	80014fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f2:	4a48      	ldr	r2, [pc, #288]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 80014f4:	4b47      	ldr	r3, [pc, #284]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 8081 	beq.w	800160a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001508:	4b42      	ldr	r3, [pc, #264]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	2b08      	cmp	r3, #8
 8001512:	d061      	beq.n	80015d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d146      	bne.n	80015aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151c:	4b3f      	ldr	r3, [pc, #252]	; (800161c <HAL_RCC_OscConfig+0x4fc>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff f953 	bl	80007cc <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152a:	f7ff f94f 	bl	80007cc <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e067      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153c:	4b35      	ldr	r3, [pc, #212]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f0      	bne.n	800152a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001550:	d108      	bne.n	8001564 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001552:	4930      	ldr	r1, [pc, #192]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 8001554:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001564:	482b      	ldr	r0, [pc, #172]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a19      	ldr	r1, [r3, #32]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	430b      	orrs	r3, r1
 8001578:	4313      	orrs	r3, r2
 800157a:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_RCC_OscConfig+0x4fc>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff f923 	bl	80007cc <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff f91f 	bl	80007cc <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e037      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x46a>
 80015a8:	e02f      	b.n	800160a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_RCC_OscConfig+0x4fc>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff f90c 	bl	80007cc <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b8:	f7ff f908 	bl	80007cc <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e020      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x498>
 80015d6:	e018      	b.n	800160a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e013      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40021000 	.word	0x40021000
 8001618:	40007000 	.word	0x40007000
 800161c:	42420060 	.word	0x42420060

08001620 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0d0      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001634:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0207 	and.w	r2, r3, #7
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d210      	bcs.n	8001664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4967      	ldr	r1, [pc, #412]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 0207 	bic.w	r2, r3, #7
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0207 	and.w	r2, r3, #7
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0b8      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800167c:	4a59      	ldr	r2, [pc, #356]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001686:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001694:	4a53      	ldr	r2, [pc, #332]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800169e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a0:	4950      	ldr	r1, [pc, #320]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d040      	beq.n	8001740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d115      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e07f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e073      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ee:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e06b      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fe:	4939      	ldr	r1, [pc, #228]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f023 0203 	bic.w	r2, r3, #3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001710:	f7ff f85c 	bl	80007cc <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	e00a      	b.n	800172e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001718:	f7ff f858 	bl	80007cc <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e053      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 020c 	and.w	r2, r3, #12
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	429a      	cmp	r2, r3
 800173e:	d1eb      	bne.n	8001718 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0207 	and.w	r2, r3, #7
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d910      	bls.n	8001770 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4924      	ldr	r1, [pc, #144]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 0207 	bic.w	r2, r3, #7
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0207 	and.w	r2, r3, #7
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e032      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177c:	4919      	ldr	r1, [pc, #100]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800179a:	4912      	ldr	r1, [pc, #72]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ae:	f000 f821 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80017b2:	4601      	mov	r1, r0
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_RCC_ClockConfig+0x1c8>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	fa21 f303 	lsr.w	r3, r1, r3
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_RCC_ClockConfig+0x1cc>)
 80017c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_ClockConfig+0x1d0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe ffba 	bl	8000748 <HAL_InitTick>

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40022000 	.word	0x40022000
 80017e4:	40021000 	.word	0x40021000
 80017e8:	08002498 	.word	0x08002498
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f4:	b490      	push	{r4, r7}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017fc:	1d3c      	adds	r4, r7, #4
 80017fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b04      	cmp	r3, #4
 800182c:	d002      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x40>
 800182e:	2b08      	cmp	r3, #8
 8001830:	d003      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x46>
 8001832:	e02d      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001836:	623b      	str	r3, [r7, #32]
      break;
 8001838:	e02d      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	0c9b      	lsrs	r3, r3, #18
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001846:	4413      	add	r3, r2
 8001848:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800184c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	0c5b      	lsrs	r3, r3, #17
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001866:	4413      	add	r3, r2
 8001868:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800186c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001872:	fb02 f203 	mul.w	r2, r2, r3
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	fbb2 f3f3 	udiv	r3, r2, r3
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
 800187e:	e004      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	4a0c      	ldr	r2, [pc, #48]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	623b      	str	r3, [r7, #32]
      break;
 800188e:	e002      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001892:	623b      	str	r3, [r7, #32]
      break;
 8001894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001896:	6a3b      	ldr	r3, [r7, #32]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bc90      	pop	{r4, r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	08002484 	.word	0x08002484
 80018a8:	08002494 	.word	0x08002494
 80018ac:	40021000 	.word	0x40021000
 80018b0:	007a1200 	.word	0x007a1200
 80018b4:	003d0900 	.word	0x003d0900

080018b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000000 	.word	0x20000000

080018cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018d0:	f7ff fff2 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 80018d4:	4601      	mov	r1, r0
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	4a03      	ldr	r2, [pc, #12]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000
 80018f0:	080024a8 	.word	0x080024a8

080018f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018f8:	f7ff ffde 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 80018fc:	4601      	mov	r1, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	0adb      	lsrs	r3, r3, #11
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4a03      	ldr	r2, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	080024a8 	.word	0x080024a8

0800191c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <RCC_Delay+0x34>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <RCC_Delay+0x38>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	0a5b      	lsrs	r3, r3, #9
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	fb02 f303 	mul.w	r3, r2, r3
 8001936:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001938:	bf00      	nop
  }
  while (Delay --);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1e5a      	subs	r2, r3, #1
 800193e:	60fa      	str	r2, [r7, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f9      	bne.n	8001938 <RCC_Delay+0x1c>
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000000 	.word	0x20000000
 8001954:	10624dd3 	.word	0x10624dd3

08001958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e03f      	b.n	80019ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d106      	bne.n	8001984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7fe fdd6 	bl	8000530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2224      	movs	r2, #36	; 0x24
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	68d2      	ldr	r2, [r2, #12]
 8001996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800199a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fc85 	bl	80022ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	6912      	ldr	r2, [r2, #16]
 80019ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	6952      	ldr	r2, [r2, #20]
 80019bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	68d2      	ldr	r2, [r2, #12]
 80019cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2220      	movs	r2, #32
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b08a      	sub	sp, #40	; 0x28
 80019f6:	af02      	add	r7, sp, #8
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4613      	mov	r3, r2
 8001a00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b20      	cmp	r3, #32
 8001a10:	d17b      	bne.n	8001b0a <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_UART_Transmit+0x2c>
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e074      	b.n	8001b0c <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_UART_Transmit+0x3e>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e06d      	b.n	8001b0c <HAL_UART_Transmit+0x11a>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2221      	movs	r2, #33	; 0x21
 8001a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a46:	f7fe fec1 	bl	80007cc <HAL_GetTick>
 8001a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	88fa      	ldrh	r2, [r7, #6]
 8001a50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	88fa      	ldrh	r2, [r7, #6]
 8001a56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a60:	d108      	bne.n	8001a74 <HAL_UART_Transmit+0x82>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d104      	bne.n	8001a74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	e003      	b.n	8001a7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a84:	e029      	b.n	8001ada <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 fa38 	bl	8001f06 <UART_WaitOnFlagUntilTimeout>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e035      	b.n	8001b0c <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10a      	bne.n	8001abc <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	8812      	ldrh	r2, [r2, #0]
 8001aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ab2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	e007      	b.n	8001acc <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	7812      	ldrb	r2, [r2, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1d0      	bne.n	8001a86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2200      	movs	r2, #0
 8001aec:	2140      	movs	r1, #64	; 0x40
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fa09 	bl	8001f06 <UART_WaitOnFlagUntilTimeout>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e006      	b.n	8001b0c <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2220      	movs	r2, #32
 8001b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
  }
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d11d      	bne.n	8001b6a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_UART_Receive_IT+0x26>
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e016      	b.n	8001b6c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_UART_Receive_IT+0x38>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e00f      	b.n	8001b6c <HAL_UART_Receive_IT+0x58>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 fa1a 	bl	8001f9a <UART_Start_Receive_IT>
 8001b66:	4603      	mov	r3, r0
 8001b68:	e000      	b.n	8001b6c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001b6a:	2302      	movs	r3, #2
  }
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10d      	bne.n	8001bc6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_UART_IRQHandler+0x52>
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 faca 	bl	8002158 <UART_Receive_IT>
      return;
 8001bc4:	e17c      	b.n	8001ec0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80b1 	beq.w	8001d30 <HAL_UART_IRQHandler+0x1bc>
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <HAL_UART_IRQHandler+0x70>
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80a6 	beq.w	8001d30 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <HAL_UART_IRQHandler+0x90>
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f043 0201 	orr.w	r2, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00a      	beq.n	8001c24 <HAL_UART_IRQHandler+0xb0>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f043 0202 	orr.w	r2, r3, #2
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00a      	beq.n	8001c44 <HAL_UART_IRQHandler+0xd0>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f043 0204 	orr.w	r2, r3, #4
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00f      	beq.n	8001c6e <HAL_UART_IRQHandler+0xfa>
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	f003 0320 	and.w	r3, r3, #32
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d104      	bne.n	8001c62 <HAL_UART_IRQHandler+0xee>
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f043 0208 	orr.w	r2, r3, #8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 811f 	beq.w	8001eb6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	f003 0320 	and.w	r3, r3, #32
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <HAL_UART_IRQHandler+0x11e>
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fa63 	bl	8002158 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf14      	ite	ne
 8001ca0:	2301      	movne	r3, #1
 8001ca2:	2300      	moveq	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <HAL_UART_IRQHandler+0x146>
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d031      	beq.n	8001d1e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f9a6 	bl	800200c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d023      	beq.n	8001d16 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	6952      	ldr	r2, [r2, #20]
 8001cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cdc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d013      	beq.n	8001d0e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	4a77      	ldr	r2, [pc, #476]	; (8001ec8 <HAL_UART_IRQHandler+0x354>)
 8001cec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe ff14 	bl	8000b20 <HAL_DMA_Abort_IT>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d016      	beq.n	8001d2c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d0c:	e00e      	b.n	8001d2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8e5 	bl	8001ede <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d14:	e00a      	b.n	8001d2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8e1 	bl	8001ede <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d1c:	e006      	b.n	8001d2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8dd 	bl	8001ede <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001d2a:	e0c4      	b.n	8001eb6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d2c:	bf00      	nop
    return;
 8001d2e:	e0c2      	b.n	8001eb6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	f040 80a1 	bne.w	8001e7c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 809b 	beq.w	8001e7c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 8095 	beq.w	8001e7c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d04e      	beq.n	8001e14 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 8001d80:	8a7b      	ldrh	r3, [r7, #18]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8099 	beq.w	8001eba <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001d8c:	8a7a      	ldrh	r2, [r7, #18]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	f080 8093 	bcs.w	8001eba <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	8a7a      	ldrh	r2, [r7, #18]
 8001d98:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d02b      	beq.n	8001dfc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	68d2      	ldr	r2, [r2, #12]
 8001dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	6952      	ldr	r2, [r2, #20]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	6952      	ldr	r2, [r2, #20]
 8001dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dd2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	68d2      	ldr	r2, [r2, #12]
 8001dec:	f022 0210 	bic.w	r2, r2, #16
 8001df0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fe58 	bl	8000aac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f86f 	bl	8001ef0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001e12:	e052      	b.n	8001eba <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d048      	beq.n	8001ebe <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8001e2c:	8a3b      	ldrh	r3, [r7, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d045      	beq.n	8001ebe <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	68d2      	ldr	r2, [r2, #12]
 8001e3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e40:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	6952      	ldr	r2, [r2, #20]
 8001e4c:	f022 0201 	bic.w	r2, r2, #1
 8001e50:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	68d2      	ldr	r2, [r2, #12]
 8001e6a:	f022 0210 	bic.w	r2, r2, #16
 8001e6e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e70:	8a3b      	ldrh	r3, [r7, #16]
 8001e72:	4619      	mov	r1, r3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f83b 	bl	8001ef0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001e7a:	e020      	b.n	8001ebe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d008      	beq.n	8001e98 <HAL_UART_IRQHandler+0x324>
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f8fb 	bl	800208c <UART_Transmit_IT>
    return;
 8001e96:	e013      	b.n	8001ec0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00e      	beq.n	8001ec0 <HAL_UART_IRQHandler+0x34c>
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f93b 	bl	8002128 <UART_EndTransmit_IT>
    return;
 8001eb2:	bf00      	nop
 8001eb4:	e004      	b.n	8001ec0 <HAL_UART_IRQHandler+0x34c>
    return;
 8001eb6:	bf00      	nop
 8001eb8:	e002      	b.n	8001ec0 <HAL_UART_IRQHandler+0x34c>
      return;
 8001eba:	bf00      	nop
 8001ebc:	e000      	b.n	8001ec0 <HAL_UART_IRQHandler+0x34c>
      return;
 8001ebe:	bf00      	nop
  }
}
 8001ec0:	3728      	adds	r7, #40	; 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	08002065 	.word	0x08002065

08001ecc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f16:	e02c      	b.n	8001f72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1e:	d028      	beq.n	8001f72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f26:	f7fe fc51 	bl	80007cc <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	1ad2      	subs	r2, r2, r3
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d91d      	bls.n	8001f72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	68d2      	ldr	r2, [r2, #12]
 8001f40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f44:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	6952      	ldr	r2, [r2, #20]
 8001f50:	f022 0201 	bic.w	r2, r2, #1
 8001f54:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2220      	movs	r2, #32
 8001f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e00f      	b.n	8001f92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	bf0c      	ite	eq
 8001f82:	2301      	moveq	r3, #1
 8001f84:	2300      	movne	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d0c3      	beq.n	8001f18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	88fa      	ldrh	r2, [r7, #6]
 8001fb8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2222      	movs	r2, #34	; 0x22
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	68d2      	ldr	r2, [r2, #12]
 8001fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fde:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	6952      	ldr	r2, [r2, #20]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	68d2      	ldr	r2, [r2, #12]
 8001ffa:	f042 0220 	orr.w	r2, r2, #32
 8001ffe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	68d2      	ldr	r2, [r2, #12]
 800201e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002022:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	6952      	ldr	r2, [r2, #20]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	2b01      	cmp	r3, #1
 800203a:	d107      	bne.n	800204c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	68d2      	ldr	r2, [r2, #12]
 8002046:	f022 0210 	bic.w	r2, r2, #16
 800204a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f7ff ff2d 	bl	8001ede <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b21      	cmp	r3, #33	; 0x21
 800209e:	d13d      	bne.n	800211c <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a8:	d113      	bne.n	80020d2 <UART_Transmit_IT+0x46>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10f      	bne.n	80020d2 <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	8812      	ldrh	r2, [r2, #0]
 80020c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	1c9a      	adds	r2, r3, #2
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	621a      	str	r2, [r3, #32]
 80020d0:	e008      	b.n	80020e4 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	1c58      	adds	r0, r3, #1
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	6208      	str	r0, [r1, #32]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4619      	mov	r1, r3
 80020f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10f      	bne.n	8002118 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	68d2      	ldr	r2, [r2, #12]
 8002102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002106:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	68d2      	ldr	r2, [r2, #12]
 8002112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002116:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	e000      	b.n	800211e <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 800211c:	2302      	movs	r3, #2
  }
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	68d2      	ldr	r2, [r2, #12]
 800213a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff febf 	bl	8001ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b22      	cmp	r3, #34	; 0x22
 800216a:	f040 8099 	bne.w	80022a0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002176:	d117      	bne.n	80021a8 <UART_Receive_IT+0x50>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d113      	bne.n	80021a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	b29b      	uxth	r3, r3
 8002192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002196:	b29a      	uxth	r2, r3
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	1c9a      	adds	r2, r3, #2
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
 80021a6:	e026      	b.n	80021f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ba:	d007      	beq.n	80021cc <UART_Receive_IT+0x74>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <UART_Receive_IT+0x82>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d106      	bne.n	80021da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	e008      	b.n	80021ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29b      	uxth	r3, r3
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4619      	mov	r1, r3
 8002204:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002206:	2b00      	cmp	r3, #0
 8002208:	d148      	bne.n	800229c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	68d2      	ldr	r2, [r2, #12]
 8002214:	f022 0220 	bic.w	r2, r2, #32
 8002218:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	68d2      	ldr	r2, [r2, #12]
 8002224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002228:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	6952      	ldr	r2, [r2, #20]
 8002234:	f022 0201 	bic.w	r2, r2, #1
 8002238:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2220      	movs	r2, #32
 800223e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	2b01      	cmp	r3, #1
 8002248:	d123      	bne.n	8002292 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	68d2      	ldr	r2, [r2, #12]
 800225a:	f022 0210 	bic.w	r2, r2, #16
 800225e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b10      	cmp	r3, #16
 800226c:	d10a      	bne.n	8002284 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002288:	4619      	mov	r1, r3
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff fe30 	bl	8001ef0 <HAL_UARTEx_RxEventCallback>
 8002290:	e002      	b.n	8002298 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fd ff5a 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	e002      	b.n	80022a2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	e000      	b.n	80022a2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80022a0:	2302      	movs	r3, #2
  }
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	6912      	ldr	r2, [r2, #16]
 80022be:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68d2      	ldr	r2, [r2, #12]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022ea:	f023 030c 	bic.w	r3, r3, #12
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	430b      	orrs	r3, r1
 80022f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	6952      	ldr	r2, [r2, #20]
 80022fe:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6992      	ldr	r2, [r2, #24]
 8002306:	430a      	orrs	r2, r1
 8002308:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2c      	ldr	r2, [pc, #176]	; (80023c0 <UART_SetConfig+0x114>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d103      	bne.n	800231c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002314:	f7ff faee 	bl	80018f4 <HAL_RCC_GetPCLK2Freq>
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	e002      	b.n	8002322 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800231c:	f7ff fad6 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8002320:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6819      	ldr	r1, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	009a      	lsls	r2, r3, #2
 8002330:	441a      	add	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	4a21      	ldr	r2, [pc, #132]	; (80023c4 <UART_SetConfig+0x118>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	0118      	lsls	r0, r3, #4
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	009a      	lsls	r2, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fbb2 f2f3 	udiv	r2, r2, r3
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <UART_SetConfig+0x118>)
 800235e:	fba3 4302 	umull	r4, r3, r3, r2
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2464      	movs	r4, #100	; 0x64
 8002366:	fb04 f303 	mul.w	r3, r4, r3
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	3332      	adds	r3, #50	; 0x32
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <UART_SetConfig+0x118>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237c:	4418      	add	r0, r3
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	009a      	lsls	r2, r3, #2
 8002388:	441a      	add	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	fbb2 f2f3 	udiv	r2, r2, r3
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <UART_SetConfig+0x118>)
 8002396:	fba3 4302 	umull	r4, r3, r3, r2
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2464      	movs	r4, #100	; 0x64
 800239e:	fb04 f303 	mul.w	r3, r4, r3
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	3332      	adds	r3, #50	; 0x32
 80023a8:	4a06      	ldr	r2, [pc, #24]	; (80023c4 <UART_SetConfig+0x118>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	4403      	add	r3, r0
 80023b6:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd90      	pop	{r4, r7, pc}
 80023c0:	40013800 	.word	0x40013800
 80023c4:	51eb851f 	.word	0x51eb851f

080023c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c8:	480c      	ldr	r0, [pc, #48]	; (80023fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023ca:	490d      	ldr	r1, [pc, #52]	; (8002400 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023cc:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d0:	e002      	b.n	80023d8 <LoopCopyDataInit>

080023d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d6:	3304      	adds	r3, #4

080023d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023dc:	d3f9      	bcc.n	80023d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023e0:	4c0a      	ldr	r4, [pc, #40]	; (800240c <LoopFillZerobss+0x22>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e4:	e001      	b.n	80023ea <LoopFillZerobss>

080023e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e8:	3204      	adds	r2, #4

080023ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ec:	d3fb      	bcc.n	80023e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023ee:	f7fe f98f 	bl	8000710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023f2:	f000 f80f 	bl	8002414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023f6:	f7fd ff7b 	bl	80002f0 <main>
  bx lr
 80023fa:	4770      	bx	lr
  ldr r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002400:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002404:	080024b8 	.word	0x080024b8
  ldr r2, =_sbss
 8002408:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800240c:	20000130 	.word	0x20000130

08002410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002410:	e7fe      	b.n	8002410 <ADC1_2_IRQHandler>
	...

08002414 <__libc_init_array>:
 8002414:	b570      	push	{r4, r5, r6, lr}
 8002416:	2500      	movs	r5, #0
 8002418:	4e0c      	ldr	r6, [pc, #48]	; (800244c <__libc_init_array+0x38>)
 800241a:	4c0d      	ldr	r4, [pc, #52]	; (8002450 <__libc_init_array+0x3c>)
 800241c:	1ba4      	subs	r4, r4, r6
 800241e:	10a4      	asrs	r4, r4, #2
 8002420:	42a5      	cmp	r5, r4
 8002422:	d109      	bne.n	8002438 <__libc_init_array+0x24>
 8002424:	f000 f822 	bl	800246c <_init>
 8002428:	2500      	movs	r5, #0
 800242a:	4e0a      	ldr	r6, [pc, #40]	; (8002454 <__libc_init_array+0x40>)
 800242c:	4c0a      	ldr	r4, [pc, #40]	; (8002458 <__libc_init_array+0x44>)
 800242e:	1ba4      	subs	r4, r4, r6
 8002430:	10a4      	asrs	r4, r4, #2
 8002432:	42a5      	cmp	r5, r4
 8002434:	d105      	bne.n	8002442 <__libc_init_array+0x2e>
 8002436:	bd70      	pop	{r4, r5, r6, pc}
 8002438:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800243c:	4798      	blx	r3
 800243e:	3501      	adds	r5, #1
 8002440:	e7ee      	b.n	8002420 <__libc_init_array+0xc>
 8002442:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002446:	4798      	blx	r3
 8002448:	3501      	adds	r5, #1
 800244a:	e7f2      	b.n	8002432 <__libc_init_array+0x1e>
 800244c:	080024b0 	.word	0x080024b0
 8002450:	080024b0 	.word	0x080024b0
 8002454:	080024b0 	.word	0x080024b0
 8002458:	080024b4 	.word	0x080024b4

0800245c <memset>:
 800245c:	4603      	mov	r3, r0
 800245e:	4402      	add	r2, r0
 8002460:	4293      	cmp	r3, r2
 8002462:	d100      	bne.n	8002466 <memset+0xa>
 8002464:	4770      	bx	lr
 8002466:	f803 1b01 	strb.w	r1, [r3], #1
 800246a:	e7f9      	b.n	8002460 <memset+0x4>

0800246c <_init>:
 800246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246e:	bf00      	nop
 8002470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002472:	bc08      	pop	{r3}
 8002474:	469e      	mov	lr, r3
 8002476:	4770      	bx	lr

08002478 <_fini>:
 8002478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247a:	bf00      	nop
 800247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247e:	bc08      	pop	{r3}
 8002480:	469e      	mov	lr, r3
 8002482:	4770      	bx	lr
